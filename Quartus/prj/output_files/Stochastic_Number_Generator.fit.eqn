-- Copyright (C) 2019  Intel Corporation. All rights reserved.
-- Your use of Intel Corporation's design tools, logic functions 
-- and other software and tools, and any partner logic 
-- functions, and any output files from any of the foregoing 
-- (including device programming or simulation files), and any 
-- associated documentation or information are expressly subject 
-- to the terms and conditions of the Intel Program License 
-- Subscription Agreement, the Intel Quartus Prime License Agreement,
-- the Intel FPGA IP License Agreement, or other applicable license
-- agreement, including, without limitation, that your use is for
-- the sole purpose of programming logic devices manufactured by
-- Intel and sold by Intel or its authorized distributors.  Please
-- refer to the applicable agreement for further details, at
-- https://fpgasoftware.intel.com/eula.
--sr_reg[0] is sr_reg[0] at FF_X25_Y3_N28
--register power-up is low

sr_reg[0] = DFFEAS( , GLOBAL(A1L92),  ,  , A1L156, bit_ones_counter[0],  , !A1L136, VCC);


--sr_reg[1] is sr_reg[1] at FF_X25_Y3_N55
--register power-up is low

sr_reg[1] = DFFEAS( , GLOBAL(A1L92),  ,  , A1L156, bit_ones_counter[1],  , !A1L136, VCC);


--sr_reg[2] is sr_reg[2] at FF_X25_Y3_N37
--register power-up is low

sr_reg[2] = DFFEAS(A1L159, GLOBAL(A1L92),  ,  , A1L156,  ,  , !A1L136,  );


--sr_reg[3] is sr_reg[3] at FF_X25_Y3_N22
--register power-up is low

sr_reg[3] = DFFEAS( , GLOBAL(A1L92),  ,  , A1L156, bit_ones_counter[3],  , !A1L136, VCC);


--sr_reg[4] is sr_reg[4] at FF_X25_Y3_N13
--register power-up is low

sr_reg[4] = DFFEAS( , GLOBAL(A1L92),  ,  , A1L156, bit_ones_counter[4],  , !A1L136, VCC);


--sr_reg[5] is sr_reg[5] at FF_X25_Y3_N16
--register power-up is low

sr_reg[5] = DFFEAS( , GLOBAL(A1L92),  ,  , A1L156, bit_ones_counter[5],  , !A1L136, VCC);


--sr_reg[6] is sr_reg[6] at FF_X25_Y3_N43
--register power-up is low

sr_reg[6] = DFFEAS(A1L164, GLOBAL(A1L92),  ,  , A1L156,  ,  , !A1L136,  );


--sr_reg[7] is sr_reg[7] at FF_X25_Y3_N46
--register power-up is low

sr_reg[7] = DFFEAS( , GLOBAL(A1L92),  ,  , A1L156, bit_ones_counter[7],  , !A1L136, VCC);


--bit_ones_counter[0] is bit_ones_counter[0] at FF_X24_Y3_N41
--register power-up is low

bit_ones_counter[0] = DFFEAS( , GLOBAL(A1L92),  ,  , A1L83, A1L2,  , A1L156, VCC);


--bit_ones_counter[1] is bit_ones_counter[1] at FF_X24_Y3_N38
--register power-up is low

bit_ones_counter[1] = DFFEAS( , GLOBAL(A1L92),  ,  , A1L83, A1L6,  , A1L156, VCC);


--bit_ones_counter[2] is bit_ones_counter[2] at FF_X23_Y3_N38
--register power-up is low

bit_ones_counter[2] = DFFEAS(A1L10, GLOBAL(A1L92),  ,  , A1L83,  ,  , A1L156,  );


--bit_ones_counter[3] is bit_ones_counter[3] at FF_X24_Y3_N20
--register power-up is low

bit_ones_counter[3] = DFFEAS( , GLOBAL(A1L92),  ,  , A1L83, A1L14,  , A1L156, VCC);


--bit_ones_counter[4] is bit_ones_counter[4] at FF_X24_Y3_N50
--register power-up is low

bit_ones_counter[4] = DFFEAS( , GLOBAL(A1L92),  ,  , A1L83, A1L18,  , A1L156, VCC);


--bit_ones_counter[5] is bit_ones_counter[5] at FF_X23_Y3_N47
--register power-up is low

bit_ones_counter[5] = DFFEAS(A1L22, GLOBAL(A1L92),  ,  , A1L83,  ,  , A1L156,  );


--bit_ones_counter[6] is bit_ones_counter[6] at FF_X24_Y3_N23
--register power-up is low

bit_ones_counter[6] = DFFEAS( , GLOBAL(A1L92),  ,  , A1L83, A1L26,  , A1L156, VCC);


--bit_ones_counter[7] is bit_ones_counter[7] at FF_X24_Y3_N53
--register power-up is low

bit_ones_counter[7] = DFFEAS( , GLOBAL(A1L92),  ,  , A1L83, A1L30,  , A1L156, VCC);


--bit_counter[8] is bit_counter[8] at FF_X23_Y3_N26
--register power-up is low

bit_counter[8] = DFFEAS(A1L34, GLOBAL(A1L92),  ,  ,  ,  ,  , A1L156,  );


--A1L2 is Add0~1 at LABCELL_X23_Y3_N30
A1L2_adder_eqn = ( bit_ones_counter[0] ) + ( VCC ) + ( !VCC );
A1L2 = SUM(A1L2_adder_eqn);

--A1L3 is Add0~2 at LABCELL_X23_Y3_N30
A1L3_adder_eqn = ( bit_ones_counter[0] ) + ( VCC ) + ( !VCC );
A1L3 = CARRY(A1L3_adder_eqn);


--A1L6 is Add0~5 at LABCELL_X23_Y3_N33
A1L6_adder_eqn = ( bit_ones_counter[1] ) + ( GND ) + ( A1L3 );
A1L6 = SUM(A1L6_adder_eqn);

--A1L7 is Add0~6 at LABCELL_X23_Y3_N33
A1L7_adder_eqn = ( bit_ones_counter[1] ) + ( GND ) + ( A1L3 );
A1L7 = CARRY(A1L7_adder_eqn);


--A1L10 is Add0~9 at LABCELL_X23_Y3_N36
A1L10_adder_eqn = ( bit_ones_counter[2] ) + ( GND ) + ( A1L7 );
A1L10 = SUM(A1L10_adder_eqn);

--A1L11 is Add0~10 at LABCELL_X23_Y3_N36
A1L11_adder_eqn = ( bit_ones_counter[2] ) + ( GND ) + ( A1L7 );
A1L11 = CARRY(A1L11_adder_eqn);


--A1L14 is Add0~13 at LABCELL_X23_Y3_N39
A1L14_adder_eqn = ( bit_ones_counter[3] ) + ( GND ) + ( A1L11 );
A1L14 = SUM(A1L14_adder_eqn);

--A1L15 is Add0~14 at LABCELL_X23_Y3_N39
A1L15_adder_eqn = ( bit_ones_counter[3] ) + ( GND ) + ( A1L11 );
A1L15 = CARRY(A1L15_adder_eqn);


--A1L18 is Add0~17 at LABCELL_X23_Y3_N42
A1L18_adder_eqn = ( bit_ones_counter[4] ) + ( GND ) + ( A1L15 );
A1L18 = SUM(A1L18_adder_eqn);

--A1L19 is Add0~18 at LABCELL_X23_Y3_N42
A1L19_adder_eqn = ( bit_ones_counter[4] ) + ( GND ) + ( A1L15 );
A1L19 = CARRY(A1L19_adder_eqn);


--A1L22 is Add0~21 at LABCELL_X23_Y3_N45
A1L22_adder_eqn = ( bit_ones_counter[5] ) + ( GND ) + ( A1L19 );
A1L22 = SUM(A1L22_adder_eqn);

--A1L23 is Add0~22 at LABCELL_X23_Y3_N45
A1L23_adder_eqn = ( bit_ones_counter[5] ) + ( GND ) + ( A1L19 );
A1L23 = CARRY(A1L23_adder_eqn);


--A1L26 is Add0~25 at LABCELL_X23_Y3_N48
A1L26_adder_eqn = ( bit_ones_counter[6] ) + ( GND ) + ( A1L23 );
A1L26 = SUM(A1L26_adder_eqn);

--A1L27 is Add0~26 at LABCELL_X23_Y3_N48
A1L27_adder_eqn = ( bit_ones_counter[6] ) + ( GND ) + ( A1L23 );
A1L27 = CARRY(A1L27_adder_eqn);


--A1L30 is Add0~29 at LABCELL_X23_Y3_N51
A1L30_adder_eqn = ( bit_ones_counter[7] ) + ( GND ) + ( A1L27 );
A1L30 = SUM(A1L30_adder_eqn);


--A1L34 is Add1~1 at LABCELL_X23_Y3_N24
A1L34_adder_eqn = ( bit_counter[8] ) + ( GND ) + ( A1L39 );
A1L34 = SUM(A1L34_adder_eqn);


--A1L38 is Add1~5 at LABCELL_X23_Y3_N21
A1L38_adder_eqn = ( bit_counter[7] ) + ( GND ) + ( A1L43 );
A1L38 = SUM(A1L38_adder_eqn);

--A1L39 is Add1~6 at LABCELL_X23_Y3_N21
A1L39_adder_eqn = ( bit_counter[7] ) + ( GND ) + ( A1L43 );
A1L39 = CARRY(A1L39_adder_eqn);


--bit_counter[7] is bit_counter[7] at FF_X23_Y3_N23
--register power-up is low

bit_counter[7] = DFFEAS(A1L38, GLOBAL(A1L92),  ,  ,  ,  ,  , A1L156,  );


--A1L42 is Add1~9 at LABCELL_X23_Y3_N18
A1L42_adder_eqn = ( bit_counter[6] ) + ( GND ) + ( A1L47 );
A1L42 = SUM(A1L42_adder_eqn);

--A1L43 is Add1~10 at LABCELL_X23_Y3_N18
A1L43_adder_eqn = ( bit_counter[6] ) + ( GND ) + ( A1L47 );
A1L43 = CARRY(A1L43_adder_eqn);


--bit_counter[6] is bit_counter[6] at FF_X23_Y3_N20
--register power-up is low

bit_counter[6] = DFFEAS(A1L42, GLOBAL(A1L92),  ,  ,  ,  ,  , A1L156,  );


--A1L46 is Add1~13 at LABCELL_X23_Y3_N15
A1L46_adder_eqn = ( bit_counter[5] ) + ( GND ) + ( A1L51 );
A1L46 = SUM(A1L46_adder_eqn);

--A1L47 is Add1~14 at LABCELL_X23_Y3_N15
A1L47_adder_eqn = ( bit_counter[5] ) + ( GND ) + ( A1L51 );
A1L47 = CARRY(A1L47_adder_eqn);


--bit_counter[5] is bit_counter[5] at FF_X23_Y3_N17
--register power-up is low

bit_counter[5] = DFFEAS(A1L46, GLOBAL(A1L92),  ,  ,  ,  ,  , A1L156,  );


--A1L50 is Add1~17 at LABCELL_X23_Y3_N12
A1L50_adder_eqn = ( bit_counter[4] ) + ( GND ) + ( A1L55 );
A1L50 = SUM(A1L50_adder_eqn);

--A1L51 is Add1~18 at LABCELL_X23_Y3_N12
A1L51_adder_eqn = ( bit_counter[4] ) + ( GND ) + ( A1L55 );
A1L51 = CARRY(A1L51_adder_eqn);


--bit_counter[4] is bit_counter[4] at FF_X23_Y3_N14
--register power-up is low

bit_counter[4] = DFFEAS(A1L50, GLOBAL(A1L92),  ,  ,  ,  ,  , A1L156,  );


--A1L54 is Add1~21 at LABCELL_X23_Y3_N9
A1L54_adder_eqn = ( bit_counter[3] ) + ( GND ) + ( A1L59 );
A1L54 = SUM(A1L54_adder_eqn);

--A1L55 is Add1~22 at LABCELL_X23_Y3_N9
A1L55_adder_eqn = ( bit_counter[3] ) + ( GND ) + ( A1L59 );
A1L55 = CARRY(A1L55_adder_eqn);


--bit_counter[3] is bit_counter[3] at FF_X23_Y3_N11
--register power-up is low

bit_counter[3] = DFFEAS(A1L54, GLOBAL(A1L92),  ,  ,  ,  ,  , A1L156,  );


--A1L58 is Add1~25 at LABCELL_X23_Y3_N6
A1L58_adder_eqn = ( bit_counter[2] ) + ( GND ) + ( A1L63 );
A1L58 = SUM(A1L58_adder_eqn);

--A1L59 is Add1~26 at LABCELL_X23_Y3_N6
A1L59_adder_eqn = ( bit_counter[2] ) + ( GND ) + ( A1L63 );
A1L59 = CARRY(A1L59_adder_eqn);


--bit_counter[2] is bit_counter[2] at FF_X23_Y3_N8
--register power-up is low

bit_counter[2] = DFFEAS(A1L58, GLOBAL(A1L92),  ,  ,  ,  ,  , A1L156,  );


--A1L62 is Add1~29 at LABCELL_X23_Y3_N3
A1L62_adder_eqn = ( bit_counter[1] ) + ( GND ) + ( A1L67 );
A1L62 = SUM(A1L62_adder_eqn);

--A1L63 is Add1~30 at LABCELL_X23_Y3_N3
A1L63_adder_eqn = ( bit_counter[1] ) + ( GND ) + ( A1L67 );
A1L63 = CARRY(A1L63_adder_eqn);


--bit_counter[1] is bit_counter[1] at FF_X23_Y3_N5
--register power-up is low

bit_counter[1] = DFFEAS(A1L62, GLOBAL(A1L92),  ,  ,  ,  ,  , A1L156,  );


--A1L66 is Add1~33 at LABCELL_X23_Y3_N0
A1L66_adder_eqn = ( bit_counter[0] ) + ( VCC ) + ( !VCC );
A1L66 = SUM(A1L66_adder_eqn);

--A1L67 is Add1~34 at LABCELL_X23_Y3_N0
A1L67_adder_eqn = ( bit_counter[0] ) + ( VCC ) + ( !VCC );
A1L67 = CARRY(A1L67_adder_eqn);


--bit_counter[0] is bit_counter[0] at FF_X23_Y3_N56
--register power-up is low

bit_counter[0] = DFFEAS( , GLOBAL(A1L92),  ,  ,  , A1L66,  , A1L156, VCC);


--C1_lfsr_register[1] is LFSR_8bit:lfsr_inst|lfsr_register[1] at FF_X24_Y3_N32
--register power-up is low

C1_lfsr_register[1] = DFFEAS(C1L15, GLOBAL(A1L92),  ,  ,  ,  ,  ,  ,  );


--C1_lfsr_register[2] is LFSR_8bit:lfsr_inst|lfsr_register[2] at FF_X24_Y3_N35
--register power-up is low

C1_lfsr_register[2] = DFFEAS( , GLOBAL(A1L92),  ,  ,  , C1L16,  ,  , VCC);


--C1_lfsr_register[3] is LFSR_8bit:lfsr_inst|lfsr_register[3] at FF_X24_Y3_N56
--register power-up is low

C1_lfsr_register[3] = DFFEAS(C1L18, GLOBAL(A1L92),  ,  ,  ,  ,  ,  ,  );


--C1_lfsr_register[4] is LFSR_8bit:lfsr_inst|lfsr_register[4] at FF_X24_Y3_N29
--register power-up is low

C1_lfsr_register[4] = DFFEAS(C1L19, GLOBAL(A1L92),  ,  ,  ,  ,  ,  ,  );


--C1_lfsr_register[5] is LFSR_8bit:lfsr_inst|lfsr_register[5] at FF_X24_Y3_N2
--register power-up is low

C1_lfsr_register[5] = DFFEAS(C1L20, GLOBAL(A1L92),  ,  ,  ,  ,  ,  ,  );


--C1_lfsr_register[6] is LFSR_8bit:lfsr_inst|lfsr_register[6] at FF_X24_Y3_N59
--register power-up is low

C1_lfsr_register[6] = DFFEAS(C1L22, GLOBAL(A1L92),  ,  ,  ,  ,  ,  ,  );


--C1_lfsr_register[7] is LFSR_8bit:lfsr_inst|lfsr_register[7] at FF_X24_Y3_N11
--register power-up is low

C1_lfsr_register[7] = DFFEAS(C1L23, GLOBAL(A1L92),  ,  ,  ,  ,  ,  ,  );


--C1_lfsr_register[8] is LFSR_8bit:lfsr_inst|lfsr_register[8] at FF_X24_Y3_N44
--register power-up is low

C1_lfsr_register[8] = DFFEAS(C1L25, GLOBAL(A1L92),  ,  ,  ,  ,  ,  ,  );


--x_bit_signal is x_bit_signal at FF_X24_Y3_N13
--register power-up is low

x_bit_signal = DFFEAS(A1L99, GLOBAL(A1L92),  ,  , A1L136,  ,  ,  ,  );


--C1L9 is LFSR_8bit:lfsr_inst|lfsr_register[7]~0 at MLABCELL_X25_Y3_N24
C1L9 = ( !C1_lfsr_register[4] & ( !C1_lfsr_register[2] & ( (!C1_lfsr_register[1] & (!C1_lfsr_register[5] & (A1L136 & !C1_lfsr_register[3]))) ) ) );


--C1L10 is LFSR_8bit:lfsr_inst|lfsr_register[7]~1 at MLABCELL_X25_Y3_N3
C1L10 = ( !C1_lfsr_register[6] & ( !C1_lfsr_register[8] & ( !C1_lfsr_register[7] ) ) );


--C1L11 is LFSR_8bit:lfsr_inst|lfsr_register[7]~2 at MLABCELL_X25_Y3_N9
C1L11 = ( !A1L143 & ( (!A1L136 & (!A1L141 & (!A1L145 & !A1L139))) ) );


--C1L12 is LFSR_8bit:lfsr_inst|lfsr_register[7]~3 at MLABCELL_X25_Y3_N48
C1L12 = ( !A1L149 & ( (!A1L153 & !A1L151) ) );


--C1L14 is LFSR_8bit:lfsr_inst|lfsr_register~4 at MLABCELL_X25_Y3_N18
C1L14 = ( A1L139 & ( C1_lfsr_register[4] & ( (!A1L136) # (!C1_lfsr_register[6] $ (!C1_lfsr_register[8] $ (!C1_lfsr_register[3]))) ) ) ) # ( !A1L139 & ( C1_lfsr_register[4] & ( (A1L136 & (!C1_lfsr_register[6] $ (!C1_lfsr_register[8] $ (!C1_lfsr_register[3])))) ) ) ) # ( A1L139 & ( !C1_lfsr_register[4] & ( (!A1L136) # (!C1_lfsr_register[6] $ (!C1_lfsr_register[8] $ (C1_lfsr_register[3]))) ) ) ) # ( !A1L139 & ( !C1_lfsr_register[4] & ( (A1L136 & (!C1_lfsr_register[6] $ (!C1_lfsr_register[8] $ (C1_lfsr_register[3])))) ) ) );


--C1L15 is LFSR_8bit:lfsr_inst|lfsr_register~5 at LABCELL_X24_Y3_N30
C1L15 = ( C1L12 & ( C1L9 & ( (!C1L10 & (C1L14 & ((!C1L11) # (A1L147)))) ) ) ) # ( !C1L12 & ( C1L9 & ( (!C1L10 & C1L14) ) ) ) # ( C1L12 & ( !C1L9 & ( (C1L14 & ((!C1L11) # (A1L147))) ) ) ) # ( !C1L12 & ( !C1L9 & ( C1L14 ) ) );


--C1L16 is LFSR_8bit:lfsr_inst|lfsr_register~6 at MLABCELL_X25_Y3_N6
C1L16 = ( C1_lfsr_register[1] & ( (A1L141) # (A1L136) ) ) # ( !C1_lfsr_register[1] & ( (!A1L136 & A1L141) ) );


--C1L17 is LFSR_8bit:lfsr_inst|lfsr_register~7 at MLABCELL_X25_Y3_N30
C1L17 = ( C1_lfsr_register[2] & ( (A1L143) # (A1L136) ) ) # ( !C1_lfsr_register[2] & ( (!A1L136 & A1L143) ) );


--C1L18 is LFSR_8bit:lfsr_inst|lfsr_register~8 at LABCELL_X24_Y3_N54
C1L18 = ( C1L12 & ( C1L17 ) ) # ( !C1L12 & ( C1L17 ) ) # ( C1L12 & ( !C1L17 & ( (!C1L11 & (C1L9 & (C1L10))) # (C1L11 & ((!A1L147) # ((C1L9 & C1L10)))) ) ) ) # ( !C1L12 & ( !C1L17 & ( (C1L9 & C1L10) ) ) );


--C1L19 is LFSR_8bit:lfsr_inst|lfsr_register~9 at LABCELL_X24_Y3_N27
C1L19 = ( C1_lfsr_register[3] & ( (A1L136) # (A1L145) ) ) # ( !C1_lfsr_register[3] & ( (A1L145 & !A1L136) ) );


--C1L20 is LFSR_8bit:lfsr_inst|lfsr_register~10 at LABCELL_X24_Y3_N0
C1L20 = ( A1L147 & ( (!A1L136) # (C1_lfsr_register[4]) ) ) # ( !A1L147 & ( (C1_lfsr_register[4] & A1L136) ) );


--C1L21 is LFSR_8bit:lfsr_inst|lfsr_register~11 at MLABCELL_X25_Y3_N33
C1L21 = ( A1L149 & ( (!A1L136) # (C1_lfsr_register[5]) ) ) # ( !A1L149 & ( (A1L136 & C1_lfsr_register[5]) ) );


--C1L22 is LFSR_8bit:lfsr_inst|lfsr_register~12 at LABCELL_X24_Y3_N57
C1L22 = ( C1L12 & ( C1L21 ) ) # ( !C1L12 & ( C1L21 ) ) # ( C1L12 & ( !C1L21 & ( (!C1L11 & (C1L9 & ((C1L10)))) # (C1L11 & ((!A1L147) # ((C1L9 & C1L10)))) ) ) ) # ( !C1L12 & ( !C1L21 & ( (C1L9 & C1L10) ) ) );


--C1L23 is LFSR_8bit:lfsr_inst|lfsr_register~13 at LABCELL_X24_Y3_N9
C1L23 = ( C1_lfsr_register[6] & ( (A1L136) # (A1L151) ) ) # ( !C1_lfsr_register[6] & ( (A1L151 & !A1L136) ) );


--C1L24 is LFSR_8bit:lfsr_inst|lfsr_register~14 at MLABCELL_X25_Y3_N51
C1L24 = ( C1_lfsr_register[7] & ( (A1L153) # (A1L136) ) ) # ( !C1_lfsr_register[7] & ( (!A1L136 & A1L153) ) );


--C1L25 is LFSR_8bit:lfsr_inst|lfsr_register~15 at LABCELL_X24_Y3_N42
C1L25 = ( C1L10 & ( C1L9 ) ) # ( !C1L10 & ( C1L9 & ( ((!A1L147 & (C1L12 & C1L11))) # (C1L24) ) ) ) # ( C1L10 & ( !C1L9 & ( ((!A1L147 & (C1L12 & C1L11))) # (C1L24) ) ) ) # ( !C1L10 & ( !C1L9 & ( ((!A1L147 & (C1L12 & C1L11))) # (C1L24) ) ) );


--A1L93 is LessThan0~0 at LABCELL_X24_Y3_N6
A1L93 = ( C1_lfsr_register[2] & ( (!A1L170) # ((C1_lfsr_register[1] & !A1L168)) ) ) # ( !C1_lfsr_register[2] & ( (C1_lfsr_register[1] & (!A1L168 & !A1L170)) ) );


--A1L94 is LessThan0~1 at LABCELL_X24_Y3_N24
A1L94 = ( A1L93 & ( (!A1L174 & (((!A1L172) # (C1_lfsr_register[4])) # (C1_lfsr_register[3]))) # (A1L174 & (C1_lfsr_register[4] & ((!A1L172) # (C1_lfsr_register[3])))) ) ) # ( !A1L93 & ( (!A1L174 & (((C1_lfsr_register[3] & !A1L172)) # (C1_lfsr_register[4]))) # (A1L174 & (C1_lfsr_register[3] & (!A1L172 & C1_lfsr_register[4]))) ) );


--A1L95 is LessThan0~2 at LABCELL_X24_Y3_N39
A1L95 = ( C1_lfsr_register[6] & ( C1_lfsr_register[7] & ( (A1L178 & (A1L180 & (!A1L182 $ (C1_lfsr_register[8])))) ) ) ) # ( !C1_lfsr_register[6] & ( C1_lfsr_register[7] & ( (!A1L178 & (A1L180 & (!A1L182 $ (C1_lfsr_register[8])))) ) ) ) # ( C1_lfsr_register[6] & ( !C1_lfsr_register[7] & ( (A1L178 & (!A1L180 & (!A1L182 $ (C1_lfsr_register[8])))) ) ) ) # ( !C1_lfsr_register[6] & ( !C1_lfsr_register[7] & ( (!A1L178 & (!A1L180 & (!A1L182 $ (C1_lfsr_register[8])))) ) ) );


--A1L96 is LessThan0~3 at LABCELL_X24_Y3_N21
A1L96 = ( A1L95 & ( !C1_lfsr_register[5] $ (A1L176) ) );


--A1L97 is LessThan0~4 at LABCELL_X24_Y3_N51
A1L97 = ( C1_lfsr_register[6] & ( C1_lfsr_register[7] & ( (!A1L182 & ((!A1L178) # ((!A1L180) # (C1_lfsr_register[8])))) # (A1L182 & (C1_lfsr_register[8] & ((!A1L178) # (!A1L180)))) ) ) ) # ( !C1_lfsr_register[6] & ( C1_lfsr_register[7] & ( (!A1L182 & ((!A1L180) # (C1_lfsr_register[8]))) # (A1L182 & (C1_lfsr_register[8] & !A1L180)) ) ) ) # ( C1_lfsr_register[6] & ( !C1_lfsr_register[7] & ( (!A1L182 & (((!A1L178 & !A1L180)) # (C1_lfsr_register[8]))) # (A1L182 & (!A1L178 & (C1_lfsr_register[8] & !A1L180))) ) ) ) # ( !C1_lfsr_register[6] & ( !C1_lfsr_register[7] & ( (!A1L182 & C1_lfsr_register[8]) ) ) );


--A1L98 is LessThan0~5 at LABCELL_X24_Y3_N15
A1L98 = ( A1L95 & ( (!A1L97 & ((!C1_lfsr_register[5]) # (A1L176))) ) ) # ( !A1L95 & ( !A1L97 ) );


--A1L99 is LessThan0~6 at LABCELL_X24_Y3_N12
A1L99 = ( A1L98 & ( (A1L94 & A1L96) ) ) # ( !A1L98 );


--A1L156 is sr_reg[0]~0 at LABCELL_X24_Y3_N18
A1L156 = (!A1L136) # (bit_counter[8]);


--A1L83 is bit_ones_counter[1]~0 at LABCELL_X24_Y3_N3
A1L83 = ( A1L98 & ( ((!A1L136) # ((A1L94 & A1L96))) # (bit_counter[8]) ) ) # ( !A1L98 );


--A1L120 is random_number[0]~output at IOOBUF_X8_Y0_N53
A1L120 = OUTPUT_BUFFER.O(.I(C1_lfsr_register[1]), , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , );


--random_number[0] is random_number[0] at PIN_AE6
random_number[0] = OUTPUT();


--A1L122 is random_number[1]~output at IOOBUF_X8_Y0_N2
A1L122 = OUTPUT_BUFFER.O(.I(C1_lfsr_register[2]), , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , );


--random_number[1] is random_number[1] at PIN_Y11
random_number[1] = OUTPUT();


--A1L124 is random_number[2]~output at IOOBUF_X28_Y0_N36
A1L124 = OUTPUT_BUFFER.O(.I(C1_lfsr_register[3]), , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , );


--random_number[2] is random_number[2] at PIN_AE7
random_number[2] = OUTPUT();


--A1L126 is random_number[3]~output at IOOBUF_X30_Y0_N36
A1L126 = OUTPUT_BUFFER.O(.I(C1_lfsr_register[4]), , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , );


--random_number[3] is random_number[3] at PIN_AE8
random_number[3] = OUTPUT();


--A1L128 is random_number[4]~output at IOOBUF_X32_Y0_N19
A1L128 = OUTPUT_BUFFER.O(.I(C1_lfsr_register[5]), , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , );


--random_number[4] is random_number[4] at PIN_W11
random_number[4] = OUTPUT();


--A1L130 is random_number[5]~output at IOOBUF_X28_Y0_N19
A1L130 = OUTPUT_BUFFER.O(.I(C1_lfsr_register[6]), , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , );


--random_number[5] is random_number[5] at PIN_U11
random_number[5] = OUTPUT();


--A1L132 is random_number[6]~output at IOOBUF_X32_Y0_N2
A1L132 = OUTPUT_BUFFER.O(.I(C1_lfsr_register[7]), , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , );


--random_number[6] is random_number[6] at PIN_V11
random_number[6] = OUTPUT();


--A1L134 is random_number[7]~output at IOOBUF_X40_Y0_N53
A1L134 = OUTPUT_BUFFER.O(.I(C1_lfsr_register[8]), , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , );


--random_number[7] is random_number[7] at PIN_AH5
random_number[7] = OUTPUT();


--A1L202 is X_q_bitwise~output at IOOBUF_X30_Y0_N53
A1L202 = OUTPUT_BUFFER.O(.I(x_bit_signal), , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , );


--X_q_bitwise is X_q_bitwise at PIN_AF9
X_q_bitwise = OUTPUT();


--A1L186 is X_q[0]~output at IOOBUF_X36_Y0_N53
A1L186 = OUTPUT_BUFFER.O(.I(sr_reg[0]), , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , );


--X_q[0] is X_q[0] at PIN_AH2
X_q[0] = OUTPUT();


--A1L188 is X_q[1]~output at IOOBUF_X40_Y0_N19
A1L188 = OUTPUT_BUFFER.O(.I(sr_reg[1]), , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , );


--X_q[1] is X_q[1] at PIN_W12
X_q[1] = OUTPUT();


--A1L190 is X_q[2]~output at IOOBUF_X34_Y0_N93
A1L190 = OUTPUT_BUFFER.O(.I(sr_reg[2]), , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , );


--X_q[2] is X_q[2] at PIN_AG6
X_q[2] = OUTPUT();


--A1L192 is X_q[3]~output at IOOBUF_X38_Y0_N19
A1L192 = OUTPUT_BUFFER.O(.I(sr_reg[3]), , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , );


--X_q[3] is X_q[3] at PIN_AD12
X_q[3] = OUTPUT();


--A1L194 is X_q[4]~output at IOOBUF_X36_Y0_N36
A1L194 = OUTPUT_BUFFER.O(.I(sr_reg[4]), , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , );


--X_q[4] is X_q[4] at PIN_AH3
X_q[4] = OUTPUT();


--A1L196 is X_q[5]~output at IOOBUF_X34_Y0_N59
A1L196 = OUTPUT_BUFFER.O(.I(sr_reg[5]), , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , );


--X_q[5] is X_q[5] at PIN_AF10
X_q[5] = OUTPUT();


--A1L198 is X_q[6]~output at IOOBUF_X40_Y0_N2
A1L198 = OUTPUT_BUFFER.O(.I(sr_reg[6]), , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , );


--X_q[6] is X_q[6] at PIN_V12
X_q[6] = OUTPUT();


--A1L200 is X_q[7]~output at IOOBUF_X34_Y0_N42
A1L200 = OUTPUT_BUFFER.O(.I(sr_reg[7]), , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , );


--X_q[7] is X_q[7] at PIN_AF11
X_q[7] = OUTPUT();


--A1L103 is probability_out[0]~output at IOOBUF_X28_Y0_N53
A1L103 = OUTPUT_BUFFER.O(.I(bit_ones_counter[0]), , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , );


--probability_out[0] is probability_out[0] at PIN_AF8
probability_out[0] = OUTPUT();


--A1L105 is probability_out[1]~output at IOOBUF_X26_Y0_N59
A1L105 = OUTPUT_BUFFER.O(.I(bit_ones_counter[1]), , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , );


--probability_out[1] is probability_out[1] at PIN_AE9
probability_out[1] = OUTPUT();


--A1L107 is probability_out[2]~output at IOOBUF_X8_Y0_N19
A1L107 = OUTPUT_BUFFER.O(.I(bit_ones_counter[2]), , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , );


--probability_out[2] is probability_out[2] at PIN_AA11
probability_out[2] = OUTPUT();


--A1L109 is probability_out[3]~output at IOOBUF_X26_Y0_N76
A1L109 = OUTPUT_BUFFER.O(.I(bit_ones_counter[3]), , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , );


--probability_out[3] is probability_out[3] at PIN_AE4
probability_out[3] = OUTPUT();


--A1L111 is probability_out[4]~output at IOOBUF_X26_Y0_N42
A1L111 = OUTPUT_BUFFER.O(.I(bit_ones_counter[4]), , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , );


--probability_out[4] is probability_out[4] at PIN_AD10
probability_out[4] = OUTPUT();


--A1L113 is probability_out[5]~output at IOOBUF_X4_Y0_N36
A1L113 = OUTPUT_BUFFER.O(.I(bit_ones_counter[5]), , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , );


--probability_out[5] is probability_out[5] at PIN_AA4
probability_out[5] = OUTPUT();


--A1L115 is probability_out[6]~output at IOOBUF_X8_Y0_N36
A1L115 = OUTPUT_BUFFER.O(.I(bit_ones_counter[6]), , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , );


--probability_out[6] is probability_out[6] at PIN_AD5
probability_out[6] = OUTPUT();


--A1L117 is probability_out[7]~output at IOOBUF_X26_Y0_N93
A1L117 = OUTPUT_BUFFER.O(.I(bit_ones_counter[7]), , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , );


--probability_out[7] is probability_out[7] at PIN_AF4
probability_out[7] = OUTPUT();


--A1L147 is seed_in[4]~input at IOIBUF_X40_Y0_N35
A1L147 = INPUT_BUFFER(.I(seed_in[4]), );


--seed_in[4] is seed_in[4] at PIN_AH6
seed_in[4] = INPUT();


--A1L136 is rstn_in~input at IOIBUF_X28_Y0_N1
A1L136 = INPUT_BUFFER(.I(rstn_in), );


--rstn_in is rstn_in at PIN_T11
rstn_in = INPUT();


--A1L139 is seed_in[0]~input at IOIBUF_X38_Y0_N52
A1L139 = INPUT_BUFFER(.I(seed_in[0]), );


--seed_in[0] is seed_in[0] at PIN_AH4
seed_in[0] = INPUT();


--A1L141 is seed_in[1]~input at IOIBUF_X36_Y0_N18
A1L141 = INPUT_BUFFER(.I(seed_in[1]), );


--seed_in[1] is seed_in[1] at PIN_T12
seed_in[1] = INPUT();


--A1L143 is seed_in[2]~input at IOIBUF_X36_Y0_N1
A1L143 = INPUT_BUFFER(.I(seed_in[2]), );


--seed_in[2] is seed_in[2] at PIN_T13
seed_in[2] = INPUT();


--A1L145 is seed_in[3]~input at IOIBUF_X32_Y0_N52
A1L145 = INPUT_BUFFER(.I(seed_in[3]), );


--seed_in[3] is seed_in[3] at PIN_AF6
seed_in[3] = INPUT();


--A1L149 is seed_in[5]~input at IOIBUF_X38_Y0_N1
A1L149 = INPUT_BUFFER(.I(seed_in[5]), );


--seed_in[5] is seed_in[5] at PIN_AE12
seed_in[5] = INPUT();


--A1L151 is seed_in[6]~input at IOIBUF_X32_Y0_N35
A1L151 = INPUT_BUFFER(.I(seed_in[6]), );


--seed_in[6] is seed_in[6] at PIN_AF5
seed_in[6] = INPUT();


--A1L153 is seed_in[7]~input at IOIBUF_X38_Y0_N35
A1L153 = INPUT_BUFFER(.I(seed_in[7]), );


--seed_in[7] is seed_in[7] at PIN_AG5
seed_in[7] = INPUT();


--A1L91 is clk_in~input at IOIBUF_X89_Y25_N21
A1L91 = INPUT_BUFFER(.I(clk_in), );


--clk_in is clk_in at PIN_W24
clk_in = INPUT();


--A1L174 is x[3]~input at IOIBUF_X34_Y0_N75
A1L174 = INPUT_BUFFER(.I(x[3]), );


--x[3] is x[3] at PIN_AF7
x[3] = INPUT();


--A1L172 is x[2]~input at IOIBUF_X4_Y0_N52
A1L172 = INPUT_BUFFER(.I(x[2]), );


--x[2] is x[2] at PIN_AB4
x[2] = INPUT();


--A1L170 is x[1]~input at IOIBUF_X6_Y0_N18
A1L170 = INPUT_BUFFER(.I(x[1]), );


--x[1] is x[1] at PIN_V10
x[1] = INPUT();


--A1L168 is x[0]~input at IOIBUF_X30_Y0_N18
A1L168 = INPUT_BUFFER(.I(x[0]), );


--x[0] is x[0] at PIN_AE11
x[0] = INPUT();


--A1L176 is x[4]~input at IOIBUF_X30_Y0_N1
A1L176 = INPUT_BUFFER(.I(x[4]), );


--x[4] is x[4] at PIN_AD11
x[4] = INPUT();


--A1L182 is x[7]~input at IOIBUF_X6_Y0_N52
A1L182 = INPUT_BUFFER(.I(x[7]), );


--x[7] is x[7] at PIN_AD4
x[7] = INPUT();


--A1L180 is x[6]~input at IOIBUF_X6_Y0_N35
A1L180 = INPUT_BUFFER(.I(x[6]), );


--x[6] is x[6] at PIN_AC4
x[6] = INPUT();


--A1L178 is x[5]~input at IOIBUF_X6_Y0_N1
A1L178 = INPUT_BUFFER(.I(x[5]), );


--x[5] is x[5] at PIN_U10
x[5] = INPUT();



--A1L92 is clk_in~inputCLKENA0 at CLKCTRL_G10
A1L92 = cyclonev_clkena(.INCLK = A1L91) WITH (clock_type = "Global Clock", ena_register_mode = "always enabled");


--A1L159 is sr_reg[2]~feeder at MLABCELL_X25_Y3_N36
A1L159 = bit_ones_counter[2];


--A1L164 is sr_reg[6]~feeder at MLABCELL_X25_Y3_N42
A1L164 = bit_ones_counter[6];


