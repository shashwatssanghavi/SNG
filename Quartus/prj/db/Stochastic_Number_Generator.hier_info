|SNG
clk_in => LFSR_8bit:lfsr_inst.clk_in
clk_in => sr_reg[0].CLK
clk_in => sr_reg[1].CLK
clk_in => sr_reg[2].CLK
clk_in => sr_reg[3].CLK
clk_in => sr_reg[4].CLK
clk_in => sr_reg[5].CLK
clk_in => sr_reg[6].CLK
clk_in => sr_reg[7].CLK
clk_in => bit_counter[0].CLK
clk_in => bit_counter[1].CLK
clk_in => bit_counter[2].CLK
clk_in => bit_counter[3].CLK
clk_in => bit_counter[4].CLK
clk_in => bit_counter[5].CLK
clk_in => bit_counter[6].CLK
clk_in => bit_counter[7].CLK
clk_in => bit_counter[8].CLK
clk_in => bit_ones_counter[0].CLK
clk_in => bit_ones_counter[1].CLK
clk_in => bit_ones_counter[2].CLK
clk_in => bit_ones_counter[3].CLK
clk_in => bit_ones_counter[4].CLK
clk_in => bit_ones_counter[5].CLK
clk_in => bit_ones_counter[6].CLK
clk_in => bit_ones_counter[7].CLK
clk_in => bit_ones_counter[8].CLK
clk_in => x_bit_signal.CLK
rstn_in => bit_ones_counter.OUTPUTSELECT
rstn_in => bit_ones_counter.OUTPUTSELECT
rstn_in => bit_ones_counter.OUTPUTSELECT
rstn_in => bit_ones_counter.OUTPUTSELECT
rstn_in => bit_ones_counter.OUTPUTSELECT
rstn_in => bit_ones_counter.OUTPUTSELECT
rstn_in => bit_ones_counter.OUTPUTSELECT
rstn_in => bit_ones_counter.OUTPUTSELECT
rstn_in => bit_ones_counter.OUTPUTSELECT
rstn_in => bit_counter.OUTPUTSELECT
rstn_in => bit_counter.OUTPUTSELECT
rstn_in => bit_counter.OUTPUTSELECT
rstn_in => bit_counter.OUTPUTSELECT
rstn_in => bit_counter.OUTPUTSELECT
rstn_in => bit_counter.OUTPUTSELECT
rstn_in => bit_counter.OUTPUTSELECT
rstn_in => bit_counter.OUTPUTSELECT
rstn_in => bit_counter.OUTPUTSELECT
rstn_in => sr_reg.OUTPUTSELECT
rstn_in => sr_reg.OUTPUTSELECT
rstn_in => sr_reg.OUTPUTSELECT
rstn_in => sr_reg.OUTPUTSELECT
rstn_in => sr_reg.OUTPUTSELECT
rstn_in => sr_reg.OUTPUTSELECT
rstn_in => sr_reg.OUTPUTSELECT
rstn_in => sr_reg.OUTPUTSELECT
rstn_in => LFSR_8bit:lfsr_inst.rstn_in
rstn_in => x_bit_signal.ENA
seed_in[0] => LFSR_8bit:lfsr_inst.seed_in[0]
seed_in[1] => LFSR_8bit:lfsr_inst.seed_in[1]
seed_in[2] => LFSR_8bit:lfsr_inst.seed_in[2]
seed_in[3] => LFSR_8bit:lfsr_inst.seed_in[3]
seed_in[4] => LFSR_8bit:lfsr_inst.seed_in[4]
seed_in[5] => LFSR_8bit:lfsr_inst.seed_in[5]
seed_in[6] => LFSR_8bit:lfsr_inst.seed_in[6]
seed_in[7] => LFSR_8bit:lfsr_inst.seed_in[7]
x[0] => LessThan0.IN8
x[1] => LessThan0.IN7
x[2] => LessThan0.IN6
x[3] => LessThan0.IN5
x[4] => LessThan0.IN4
x[5] => LessThan0.IN3
x[6] => LessThan0.IN2
x[7] => LessThan0.IN1
random_number[0] << LFSR_8bit:lfsr_inst.random_vector[0]
random_number[1] << LFSR_8bit:lfsr_inst.random_vector[1]
random_number[2] << LFSR_8bit:lfsr_inst.random_vector[2]
random_number[3] << LFSR_8bit:lfsr_inst.random_vector[3]
random_number[4] << LFSR_8bit:lfsr_inst.random_vector[4]
random_number[5] << LFSR_8bit:lfsr_inst.random_vector[5]
random_number[6] << LFSR_8bit:lfsr_inst.random_vector[6]
random_number[7] << LFSR_8bit:lfsr_inst.random_vector[7]
X_q_bitwise << x_bit_signal.DB_MAX_OUTPUT_PORT_TYPE
X_q[0] << sr_reg[0].DB_MAX_OUTPUT_PORT_TYPE
X_q[1] << sr_reg[1].DB_MAX_OUTPUT_PORT_TYPE
X_q[2] << sr_reg[2].DB_MAX_OUTPUT_PORT_TYPE
X_q[3] << sr_reg[3].DB_MAX_OUTPUT_PORT_TYPE
X_q[4] << sr_reg[4].DB_MAX_OUTPUT_PORT_TYPE
X_q[5] << sr_reg[5].DB_MAX_OUTPUT_PORT_TYPE
X_q[6] << sr_reg[6].DB_MAX_OUTPUT_PORT_TYPE
X_q[7] << sr_reg[7].DB_MAX_OUTPUT_PORT_TYPE
probability_out[0] << bit_ones_counter[0].DB_MAX_OUTPUT_PORT_TYPE
probability_out[1] << bit_ones_counter[1].DB_MAX_OUTPUT_PORT_TYPE
probability_out[2] << bit_ones_counter[2].DB_MAX_OUTPUT_PORT_TYPE
probability_out[3] << bit_ones_counter[3].DB_MAX_OUTPUT_PORT_TYPE
probability_out[4] << bit_ones_counter[4].DB_MAX_OUTPUT_PORT_TYPE
probability_out[5] << bit_ones_counter[5].DB_MAX_OUTPUT_PORT_TYPE
probability_out[6] << bit_ones_counter[6].DB_MAX_OUTPUT_PORT_TYPE
probability_out[7] << bit_ones_counter[7].DB_MAX_OUTPUT_PORT_TYPE


|SNG|LFSR_8bit:lfsr_inst
clk_in => pn_out~reg0.CLK
clk_in => lfsr_register[1].CLK
clk_in => lfsr_register[2].CLK
clk_in => lfsr_register[3].CLK
clk_in => lfsr_register[4].CLK
clk_in => lfsr_register[5].CLK
clk_in => lfsr_register[6].CLK
clk_in => lfsr_register[7].CLK
clk_in => lfsr_register[8].CLK
rstn_in => lfsr_register.OUTPUTSELECT
rstn_in => lfsr_register.OUTPUTSELECT
rstn_in => lfsr_register.OUTPUTSELECT
rstn_in => lfsr_register.OUTPUTSELECT
rstn_in => lfsr_register.OUTPUTSELECT
rstn_in => lfsr_register.OUTPUTSELECT
rstn_in => lfsr_register.OUTPUTSELECT
rstn_in => lfsr_register.OUTPUTSELECT
rstn_in => pn_out~reg0.ENA
seed_in[0] => lfsr_register.DATAB
seed_in[0] => Equal0.IN7
seed_in[1] => lfsr_register.DATAB
seed_in[1] => Equal0.IN6
seed_in[2] => lfsr_register.DATAB
seed_in[2] => Equal0.IN5
seed_in[3] => lfsr_register.DATAB
seed_in[3] => Equal0.IN4
seed_in[4] => lfsr_register.DATAB
seed_in[4] => Equal0.IN3
seed_in[5] => lfsr_register.DATAB
seed_in[5] => Equal0.IN2
seed_in[6] => lfsr_register.DATAB
seed_in[6] => Equal0.IN1
seed_in[7] => lfsr_register.DATAB
seed_in[7] => Equal0.IN0
pn_out <= pn_out~reg0.DB_MAX_OUTPUT_PORT_TYPE
random_vector[0] <= lfsr_register[1].DB_MAX_OUTPUT_PORT_TYPE
random_vector[1] <= lfsr_register[2].DB_MAX_OUTPUT_PORT_TYPE
random_vector[2] <= lfsr_register[3].DB_MAX_OUTPUT_PORT_TYPE
random_vector[3] <= lfsr_register[4].DB_MAX_OUTPUT_PORT_TYPE
random_vector[4] <= lfsr_register[5].DB_MAX_OUTPUT_PORT_TYPE
random_vector[5] <= lfsr_register[6].DB_MAX_OUTPUT_PORT_TYPE
random_vector[6] <= lfsr_register[7].DB_MAX_OUTPUT_PORT_TYPE
random_vector[7] <= lfsr_register[8].DB_MAX_OUTPUT_PORT_TYPE
ready <= <VCC>


